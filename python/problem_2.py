#!/usr/bin/env python

""" Solution to "Even Fibonacci numbers", aka Problem 2

http://projecteuler.net/problem=2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

n = 10  # 10 | 4000000

def calc_fib_num_v1(n):
    "Find a Fibonacci number using Binet's formula."
    
    phi = (1 + 5**.5)/2
    fib_nummber = (phi**n - (-phi)**(-n))/5**.5
    return int(fib_nummber)

def sum_even_fib_nums_method_1(n):
    "Find the sum of even valued Fibonacci terms"
    return sum([calc_fib_num_v1(_) for _ in xrange(1,n) if calc_fib_num_v1(_) %  2 == 0])

if __name__ == "__main__":
    print("The sum of all the multiples of 3 or 5 below {0} is {1}."
            .format(n, sum_even_fib_nums_method_1(n)))
